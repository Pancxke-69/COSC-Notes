RDP:
xfreerdp /u:student /v:10.50.38.121 -dynamic-resolution +glyph-cache +clipboard
Handbook:
https://cted.cybbh.io/tech-college/pns/public/pns/latest/guides/ps_sg.html

                                            Day 1
-------------------------------------------------------------------------------
/> Get-Help [*Command]
  - Examples
  - Detailed
  - ComputerName
/> Get-Process

SCRIPTING
-----------------
  !IMPORTANT Variables
  >> $true
  >> $false
  >> $_ (pipeline variable)
  >> $Matches
  >> $Input

!TYPCASTING
  >> [string]
  >> [int]
  >> [float]
  >> [array]
    > empty array $array = @()
!METHODS
  >> .GetType()
  >> .Name (Doesnt print a table, just prints type !!!USEFUL)
    > ([string]$false + 'hello world').GetType().Name | Get-Member
  >> Find
  >> Running
  >> Variables
!Random
<# This is a
Multiline
Coment #>

$array = 'gal','dir','echo','?','%','ft'
$array | %{Get-Alias $_}
  # this gets the alias for each of the items in the array
/> Get-NetFirewallRule
  # this shows firewall rules
/> Set-Alias gh Get-Help
  # this sets an alias
/> $var1 = Get-Random -Minimum 25 -Maximum 51
  # this sets var1 to a random number between 25 and 51
  # this only runs the random number generator once, so if you call var1 multiple times, it gives the same random number
/> $var2 = Get-Random -Minumum 1 -Maximum 10
  # this sets var2 to a random number between 1 and 10
/> ''
  # this literaly prints out what is typed
/> ""
  # this prints out the value of whatever is put in
/> $var1 = "Hellow World!"
  > [array]$var[0..5]
    PRINTS characters 0-5 in the world hello world
/> $myblock = { Get-Service | Format-Table Name, Status }
  > &myblock or Invoke-Command $myblock
    > & - is used to run the specified variable after it is saved in memory
/> $a = 1
  > $b = {1+1}
  > $a += &$b
    # a scipt within a script "script-seption"
/> Get-ChildItem "C:\Users\student\Desktop" | Sort-Object -Property Length -Descending
  # sort-object sorts object based on -property and in this example it sorts by descending order
/> Get-Service | Group-Object { $_.name.Substring(0,1).ToUpper() }
  # gets list of services and groups object by the second character, which in this case is a letter not a number
/> Get-Service | Group-Object { $_.name.Substring(0,1).ToUpper() } | ForEach-Object{($_.name + " ") * 7; "======"; $_.Group}
  # takes the 2nd character like the one above it and adds a space 7 times and then 6 '=' 
/> 1..5 | ForEach-Object {$_+1}

COMPARISON
----------
-like
-notlike
-match
  > $matches
    # this is a table that contains the matched strings and can be referenced by index
-notmatch
-or
-and
/> if else
  > -eq
  > -ne
  > -ge
  > -gt
  > -le
  > -lt

                                          Day 2
--------------------------------------------------------------------------------
$nums = 1,2,3,4,5
$nums.GetType()
$nums | ForEach-Object{$_ * 2}
foreach($i in $nums){$i * 2}
Get-Process | ForEach-Object{$_.name}
$BB = "Mr. Krabs","Sandy","spOnGe bOb","Patrick","Larry the Lobster","Plankton","Gary"
foreach($fish in $BB){
  if($fish.toupper() -like 'SPONGE*'){
    "$fish is the best fry cook"
  } elseif($fish -match '^l.*r$'){
    "$fish has the most gainz"
  } else{
    "$fish is a fine citizen"
  }
}
/> Get-Content
  # reading files
/> Add-Content
  # writing to files


/> -split
  > foreach($oct in ('8.8.8.8' -split '\.')){
      if ([int]$oct -lt 0 -or [int]$oct -gt 255){
          "$oct is a valid octet"
      }else{"$oct is a valid octet"}
    }
/> -join
  > 'cat','dog' -join " "
  > .startswith('c')
  > .endswith('t')

/> functions 
  # elements provided on the pipeline
  > function Cool-Printer {process{$_}}
    1,2,3,4,5 | Cool-Printer
      PRINTS: 1,2,3,4,5 on newlines
  > function Get-Sum {begin{$sum = 0}process{$sum += $_}end{$sum}}
    1,2,3,4,5 | Get-Sum
  > Get-Process | Where-Object {$_.name -like "*ms*"} | Select ProcessName, Id, WS
    # this gets running processes that have 'ms' in the name

  > function Print-Input{$sum = 0
    foreach($num in $input){
        $num
        $sum += $num
    }
        $sum
    }
    function Print-PSitem{...}
    

/> do / until
  > $num = 0
    do{
        $num
        $num ++
    }while($num -lt 3)
    # this prints num until its 3



























